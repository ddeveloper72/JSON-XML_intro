JSON stands for JavaScript Object Notation.

{
  "name": "John",
  "favoriteNumber": 22,
  "isPharmacist": true
}

• It's a lightweight data interchange format that's easy for humans to read and write, and easy for machines to parse and generate.
• Commonly used for storing config settings for different applications and programming languages.
• Lightweight, easy to read and write.

Data Types:
• Number: 1, 2, 3, 1.5, -2.5, 1.2e10
• String: "John", "Doe"
• Boolean: true, false
• Array: [1, 2, 3, 4, 5] or ["John", "Doe"]
• Object: {"name": "John", "favoriteNumber": 22} 
• Null: null

Key-Value Pairs:
• JSON data is written as key-value pairs.
• Keys must be strings, and values must be a valid JSON data type (string, number, object, array, boolean, null).

{
  "name": "John",
  "favoriteNumber": 22,
  "isPharmacist": true
}


Basic Principles:

{
    "keyValuePairs": {
        "description": "Keys are properties of the object, and values are the data stored in the properties.",
        "properties": "Properties are surrounded by double quotes, the same as strings.",
        "numbersBooleans": "Numbers and booleans are written as they are.",
        "separator": "The key-value pairs are separated by a colon.",
        "comma": "The key-value pairs are separated by commas.",
        "enclosure": "The key-value pairs are enclosed in curly braces."
    }
}

In this Example, the object below can be saved to a JSON file, eg user.json:

{
  "name": "John",
  "favoriteNumber": 22,
  "isPharmacist": true,
  "friends": [{                 // Array of Objects
    "name": "Jane",
    "favoriteNumber": 23,
    "isPharmacist": false,
    "friends": [                // Nested Array of Objects
        {
            "name": "Alice",
            "favoriteNumber": 24,
            "isPharmacist": true
        },
        {
            "name": "Bob",
            "favoriteNumber": 25,
            "isPharmacist": false
        }
    ],           
  }]
}